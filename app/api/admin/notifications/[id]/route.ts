import { NextResponse } from 'next/server';
import { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs';
import { cookies } from 'next/headers';

export async function PATCH(
    request: Request,
    { params }: { params: Promise<{ id: string }> }
) {
    try {
        const { id } = await params;
        const body = await request.json();
        const { status } = body as { status: string };

        const cookieStore = cookies();
        const supabase = createRouteHandlerClient({ cookies: () => cookieStore });
        
        // Verificar autentica√ß√£o
        const { data: { session } } = await supabase.auth.getSession();
        if (!session) {
            return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
        }

        // Atualizar notifica√ß√£o no Supabase
        const { data: notification, error } = await supabase
            .from('admin_notifications')
            .update({ 
                status,
                updated_at: new Date().toISOString()
            })
            .eq('id', id)
            .select()
            .single();

        if (error) {
            console.error('Erro ao atualizar notifica√ß√£o:', error);
            return NextResponse.json(
                { success: false, error: 'Erro ao atualizar notifica√ß√£o' },
                { status: 500 }
            );
        }

        if (!notification) {
            return NextResponse.json(
                { success: false, error: 'Notifica√ß√£o n√£o encontrada' },
                { status: 404 }
            );
        }

        console.log(`üìù Notifica√ß√£o ${id} atualizada para status: ${status}`);

        // Se aprovado, atualizar production_status na tabela pages para "in_production"
        if (status === 'approved' && notification.page_id) {
            const { error: pageUpdateError } = await supabase
                .from('pages')
                .update({
                    production_status: 'in_production',
                    approved_at: new Date().toISOString(),
                    production_started_at: new Date().toISOString()
                })
                .eq('id', notification.page_id);

            if (pageUpdateError) {
                console.error('‚ùå Erro ao atualizar status de produ√ß√£o:', pageUpdateError);
            } else {
                console.log(`‚úÖ Status de produ√ß√£o atualizado para "in_production" na p√°gina ${notification.page_id}`);
            }
        }

        return NextResponse.json({ 
            success: true, 
            notification 
        });

    } catch (err) {
console.error('Erro ao atualizar notifica√ß√£o:', err);
        return NextResponse.json(
            { success: false, error: 'Erro interno do servidor' 




},
            { status: 500 }
        );
    }
}

export async function DELETE(
    request: Request,
    { params }: { params: Promise<{ id: string }> }
) {
    try {
        const { id } = await params;

        const cookieStore = cookies();
        const supabase = createRouteHandlerClient({ cookies: () => cookieStore });
        
        // Verificar autentica√ß√£o
        const { data: { session } } = await supabase.auth.getSession();
        if (!session) {
            return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
        }

        // Excluir notifica√ß√£o do Supabase
        const { error } = await supabase
            .from('admin_notifications')
            .delete()
            .eq('id', id);

        if (error) {
            console.error('Erro ao excluir notifica√ß√£o:', error);
            return NextResponse.json(
                { success: false, error: 'Erro ao excluir notifica√ß√£o' },
                { status: 500 }
            );
        }

        console.log(`üóëÔ∏è Notifica√ß√£o ${id} exclu√≠da com sucesso`);

        return NextResponse.json({ 
            success: true, 
            message: 'Notifica√ß√£o exclu√≠da com sucesso' 
        });

    } catch (err) {
console.error('Erro ao excluir notifica√ß√£o:', err);
        return NextResponse.json(
            { success: false, error: 'Erro interno do servidor' 




},
            { status: 500 }
        );
    }
}
